<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode之二叉树</title>
    <link href="/2021/06/19/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2021/06/19/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h1 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a>110. 平衡二叉树</h1><p><font color="#999AAA"><strong>给定一个二叉树，判断它是否是高度平衡的二叉树。</strong><br>本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。<br><font color="#999AAA"><strong>输入</strong>：root = [3,9,20,null,null,15,7]<br><strong>输出</strong>：true</font></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">depth</span><span class="hljs-params">(TreeNode root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left=depth(root.left);<br>        <span class="hljs-keyword">if</span>(left==-<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> right=depth(root.right);<br>        <span class="hljs-keyword">if</span>(right==-<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(Math.abs(left-right)&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+Math.max(left,right);<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> depth(root)==-<span class="hljs-number">1</span>?<span class="hljs-keyword">false</span>:<span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>思路：递归<br>三步走：(1)明确递归函数的参数和返回值;<br><code>public int depth(TreeNode root)</code><br>(2)明确终止条件;<br><code>if(root==null) return 0;</code><br>(3)明确单层递归的逻辑。<br>如何判断当前传入节点为根节点的二叉树是否是平衡二叉树呢，当然是左子树高度和右子树高度相差。<br>分别求出左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则则返回-1，表示已经不是二叉树了。</p></blockquote><h1 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a>222. 完全二叉树的节点个数</h1><p><font color="#999AAA"><strong>给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。</strong><br>完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^h 个节点。<br><strong>输入</strong>：root = [1,2,3,4,5,6]<br><strong>输出</strong>：6</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//迭代法，不高效 O(n),O(n)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countNodes</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        Queue&lt;TreeNode&gt; q=<span class="hljs-keyword">new</span> LinkedList&lt;TreeNode&gt;();<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(root!=<span class="hljs-keyword">null</span>) &#123;<br>            q.offer(root);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">while</span>(!q.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> cnt=q.size();<br>            sum+=cnt;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;i++)&#123;<br>                TreeNode tmp=q.peek();<br>                q.poll();<br>                <span class="hljs-keyword">if</span>(tmp.left!=<span class="hljs-keyword">null</span>)&#123;<br>                    q.offer(tmp.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(tmp.right!=<span class="hljs-keyword">null</span>)&#123;<br>                    q.offer(tmp.right);<br>                &#125;<br>                <span class="hljs-comment">//sum++;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">// 通用递归解法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countNodes</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 针对完全二叉树的解法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 满二叉树的结点数为：2^depth - 1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countNodes</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> leftDepth = getDepth(root.left);<br>        <span class="hljs-keyword">int</span> rightDepth = getDepth(root.right);<br>        <span class="hljs-keyword">if</span> (leftDepth == rightDepth) &#123;<span class="hljs-comment">// 左子树是满二叉树</span><br>            <span class="hljs-comment">// 2^leftDepth其实是 （2^leftDepth - 1） + 1 ，左子树 + 根结点</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; leftDepth) + countNodes(root.right);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 右子树是满二叉树</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; rightDepth) + countNodes(root.left);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> depth = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>            root = root.left;<br>            depth++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> depth;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。<br>对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。<br>对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode数组题型总结篇</title>
    <link href="/2021/05/12/Leetcode%E6%95%B0%E7%BB%84%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93%E7%AF%87/"/>
    <url>/2021/05/12/Leetcode%E6%95%B0%E7%BB%84%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-数组的经典题目"><a href="#Leetcode-数组的经典题目" class="headerlink" title="Leetcode-数组的经典题目"></a>Leetcode-数组的经典题目</h1><h1 id="一、二分法"><a href="#一、二分法" class="headerlink" title="一、二分法"></a>一、二分法</h1><h2 id="1-相关题目"><a href="#1-相关题目" class="headerlink" title="1.相关题目"></a>1.相关题目</h2><ul><li>704.二分查找</li><li>35.搜索插入位置</li><li>34.在排序数组中查找元素的第一个和最后一个位置</li><li>69.x 的平方根</li><li>367.有效的完全平方数</li></ul><h3 id="1-704-二分查找"><a href="#1-704-二分查找" class="headerlink" title="(1)704.二分查找"></a>(1)704.二分查找</h3><p><img src="https://img-blog.csdnimg.cn/20210506150731568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> pivot, left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>      pivot = left + (right - left) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (nums[pivot] == target) <span class="hljs-keyword">return</span> pivot;<br>      <span class="hljs-keyword">if</span> (target &lt; nums[pivot]) right = pivot - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> left = pivot + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>二分法前提：数组为有序数组，无重复元素。<br>循环不变量规则：<br>区间是左闭右开时，<code>while(left &lt; right)</code>，<code>if (nums[middle] &gt; target) right 更新为 middle</code><br>区间是左闭右闭时，<code>while (left &lt;= right)</code> ，<code>if (nums[middle] &gt; target) right 要赋值为 middle - 1</code></p></blockquote><h3 id="2-35-搜索插入位置"><a href="#2-35-搜索插入位置" class="headerlink" title="(2)35.搜索插入位置"></a>(2)35.搜索插入位置</h3><p><img src="https://img-blog.csdnimg.cn/20210507195353367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=nums.length-<span class="hljs-number">1</span>,m=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>            m=(l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[m]&gt;target)&#123;<br>                r=m-<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[m]&lt;target)&#123;<br>                l=m+<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> m;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote><p>经典二分法</p></blockquote><h3 id="3-34-在排序数组中查找元素的第一个和最后一个位置"><a href="#3-34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="(3)34.在排序数组中查找元素的第一个和最后一个位置"></a>(3)34.在排序数组中查找元素的第一个和最后一个位置</h3><p><img src="https://img-blog.csdnimg.cn/2021050719533621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ans;<br><br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123; <br>            <span class="hljs-keyword">int</span> mid =( l + r ) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &gt;= target) &#123;<br>                r = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (nums[l] != target) &#123;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ans[<span class="hljs-number">0</span>] = l;<br>            l = <span class="hljs-number">0</span>; r = n - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                <span class="hljs-keyword">int</span> mid =( l + r + <span class="hljs-number">1</span> ) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (nums[mid] &lt;= target) &#123;<br>                    l = mid;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    r = mid - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125; <br>            ans[<span class="hljs-number">1</span>] = l;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><blockquote><p>看了题解后发现还是用的二分法，但是思路挺巧妙的。**<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/gong-shui-san-xie-kao-cha-dui-er-fen-de-86bk0/">由于二分是从中间开始找起的，所以找的必然是条件区间中靠近中心的的边界值。</a>**</p></blockquote><h3 id="4-69-x-的平方根"><a href="#4-69-x-的平方根" class="headerlink" title="(4)69.x 的平方根"></a>(4)69.x 的平方根</h3><p><img src="https://img-blog.csdnimg.cn/20210508104302479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>       <span class="hljs-comment">// double t=Math.sqrt(x);</span><br>       <span class="hljs-comment">// return (int)t;</span><br>       <span class="hljs-comment">//二分法</span><br>       <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=x;<br>       <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录平方根的值</span><br>       <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>           <span class="hljs-keyword">int</span> mid=l+(r-l)/<span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span>)mid*mid&lt;=x)&#123;<br>               ans=mid;<br>               l=mid+<span class="hljs-number">1</span>;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               r=mid-<span class="hljs-number">1</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><blockquote><p>刚开始用了sqrt,但是这个题目是想让大家自己实现，有多种方法，二分法有一个注意点，<code>(long)mid*mid&lt;=x,l=mid+1</code>,是小于号，搜索出来的值是较小的左值，相当于取整后。</p></blockquote><h3 id="5-367-有效的完全平方数"><a href="#5-367-有效的完全平方数" class="headerlink" title="(5)367.有效的完全平方数"></a>(5)367.有效的完全平方数</h3><p><img src="https://img-blog.csdnimg.cn/2021050810513559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=num;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录平方根的值</span><br>        <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>            <span class="hljs-keyword">int</span> mid=l+(r-l)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span>)mid*mid&lt;=num)&#123;<br>               ans=mid;<br>               l=mid+<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>               r=mid-<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ans*ans==num) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><blockquote><p>和上个题一样，稍微修改下返回值即可。</p></blockquote><h1 id="二、双指针法"><a href="#二、双指针法" class="headerlink" title="二、双指针法"></a>二、双指针法</h1><h2 id="1-相关题目-1"><a href="#1-相关题目-1" class="headerlink" title="1.相关题目"></a>1.相关题目</h2><ul><li><a href="https://leetcode-cn.com/problems/remove-element/">27.移除元素</a></li><li>26.删除排序数组中的重复项</li><li>283.移动零</li><li>844.比较含退格的字符串</li><li>977.有序数组的平方<h3 id="1-27-移除元素"><a href="#1-27-移除元素" class="headerlink" title="(1)27.移除元素"></a>(1)27.移除元素</h3><img src="https://img-blog.csdnimg.cn/20210506153825651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"><br><img src="https://img-blog.csdnimg.cn/20210506153840752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="示例"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>         <span class="hljs-keyword">if</span>(nums[i]!=val)&#123;<br>             nums[index++]=nums[i];<br>         &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><blockquote><p>双指针法（快慢指针法）：通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。<br>与26. 删除排序数组中的重复项类似，如果当前元素 x 与移除元素 val 相同，那么跳过该元素。如果当前元素 x 与移除元素 val 不同，那么我们将其放到下标 index 的位置，并让 index 自增右移。最终得到的 index 即是答案。<br>暴力：两层for循环，第二层for循环时，遇到相同数值，则将此元素之后的数前移一位。</p></blockquote><h3 id="2-26-删除排序数组中的重复项"><a href="#2-26-删除排序数组中的重复项" class="headerlink" title="(2)26.删除排序数组中的重复项"></a>(2)26.删除排序数组中的重复项</h3><p><img src="https://img-blog.csdnimg.cn/20210509143918444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"><br><img src="https://img-blog.csdnimg.cn/2021050914393184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="示例"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//暴力</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> s=nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;s;j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i]==nums[j])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=j+<span class="hljs-number">1</span>;t&lt;s;t++)&#123;<br>                        nums[t-<span class="hljs-number">1</span>]=nums[t];<br>                    &#125;<br>                    j=j-<span class="hljs-number">1</span>;<br>                    s--;    <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> s=nums.length;<br>        <span class="hljs-keyword">int</span> slow=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> fast=<span class="hljs-number">0</span>;fast&lt;s-<span class="hljs-number">1</span>;fast++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[fast]!=nums[fast+<span class="hljs-number">1</span>])&#123;<br>                nums[++slow]=nums[fast+<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><blockquote><p>假设数组<code>nums</code>的长度为<code>s</code>。将快指针<code>fast</code> 依次遍历从<code>0</code>到<code>s-1</code>的每个位置，对于每个位置，如果<code>nums[fast]!=nums[fast+1]</code>，说明<code>fast</code>和之后的元素都不同，因此将<code>nums[fast+1]</code>的值复制到 <code>nums[slow]</code>，然后将 <code>slow</code> 的值加 <code>1</code>，即指向下一个位置。</p></blockquote><h3 id="3-283-移动零"><a href="#3-283-移动零" class="headerlink" title="(3)283.移动零"></a>(3)<a href="https://miracle-zj.github.io/2021/04/29/Leetcode%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92%E4%B8%80/">283.移动零</a></h3><h3 id="4-844-比较含退格的字符串"><a href="#4-844-比较含退格的字符串" class="headerlink" title="(4)844.比较含退格的字符串"></a>(4)844.比较含退格的字符串</h3><p><img src="https://img-blog.csdnimg.cn/20210509144732154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">backspaceCompare</span><span class="hljs-params">(String S, String T)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = S.length() - <span class="hljs-number">1</span>, j = T.length() - <span class="hljs-number">1</span>;<span class="hljs-comment">//指向末尾</span><br>        <span class="hljs-keyword">int</span> skipS = <span class="hljs-number">0</span>, skipT = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录#个数</span><br><br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (S.charAt(i) == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                    skipS++;<br>                    i--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (skipS &gt; <span class="hljs-number">0</span>) &#123;<br>                    skipS--;<br>                    i--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (T.charAt(j) == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                    skipT++;<br>                    j--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (skipT &gt; <span class="hljs-number">0</span>) &#123;<br>                    skipT--;<br>                    j--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (S.charAt(i) != T.charAt(j)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>            i--;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><blockquote><p>key:<code>#</code>只会消除左边元素，对右边是没有影响的。所以从数组末尾开始判断。<br><a href="https://leetcode-cn.com/problems/backspace-string-compare/solution/shuang-zhi-zhen-bi-jiao-han-tui-ge-de-zi-8fn8/">题解</a><img src="https://img-blog.csdnimg.cn/20210509164421724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p></blockquote><h3 id="5-977-有序数组的平方"><a href="#5-977-有序数组的平方" class="headerlink" title="(5)977.有序数组的平方"></a>(5)977.有序数组的平方</h3><p><img src="https://img-blog.csdnimg.cn/202105101427067.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] sortedSquares(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-comment">//双指针，比较谁大，把较大的数逆序放入位置pos</span><br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = n - <span class="hljs-number">1</span>, pos = n - <span class="hljs-number">1</span>; i &lt;= j;) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] * nums[i] &gt; nums[j] * nums[j]) &#123;<br>                ans[pos] = nums[i] * nums[i];<br>                ++i;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans[pos] = nums[j] * nums[j];<br>                --j;<br>            &#125;<br>            --pos;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><blockquote><p>双指针，比较谁大，把较大的数逆序放入位置pos</p></blockquote><h1 id="三、滑动窗口"><a href="#三、滑动窗口" class="headerlink" title="三、滑动窗口"></a>三、滑动窗口</h1><h2 id="1-相关题目-2"><a href="#1-相关题目-2" class="headerlink" title="1.相关题目"></a>1.相关题目</h2><ul><li>209.长度最小的子数组</li><li>904.水果成篮</li><li>76.最小覆盖子串</li></ul><h3 id="1-209-长度最小的子数组"><a href="#1-209-长度最小的子数组" class="headerlink" title="(1)209.长度最小的子数组"></a>(1)209.长度最小的子数组</h3><p><img src="https://img-blog.csdnimg.cn/20210511154257719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-comment">//利用滑动窗口思想</span><br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<span class="hljs-comment">//相当于是慢指针</span><br>        <span class="hljs-keyword">int</span> result=<span class="hljs-number">999999</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;nums.length;j++)&#123;<span class="hljs-comment">//快指针</span><br>            sum+=nums[j];<br>            <span class="hljs-keyword">while</span>(sum&gt;=target)&#123;<span class="hljs-comment">//注意是while</span><br>                <span class="hljs-keyword">int</span> l=j-index+<span class="hljs-number">1</span>;<br>                result=result&lt;=l?result:l;<br>                sum-=nums[index++];<span class="hljs-comment">//key</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(result==<span class="hljs-number">999999</span>) result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><blockquote><p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。<br>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，窗口的起始位置设置为数组的起始位置就可以了。</p></blockquote><h3 id="2-904-水果成篮"><a href="#2-904-水果成篮" class="headerlink" title="(2)904.水果成篮"></a>(2)904.水果成篮</h3><p><img src="https://img-blog.csdnimg.cn/20210510152235481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"><br><img src="https://img-blog.csdnimg.cn/20210510152249170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="示例"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">totalFruit</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] tree)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (tree == <span class="hljs-keyword">null</span> || tree.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = tree.length;<br><br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">0</span>, left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            map.put(tree[i], map.getOrDefault(tree[i], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 右边界</span><br>            <span class="hljs-keyword">while</span> (map.size() &gt; <span class="hljs-number">2</span>) &#123;  <span class="hljs-comment">// 不符合条件：水果种类大于2</span><br>                map.put(tree[left], map.get(tree[left]) - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (map.get(tree[left]) == <span class="hljs-number">0</span>) map.remove(tree[left]); <br>                left++;  <span class="hljs-comment">// 左边界</span><br>            &#125;<br>            maxLen = Math.max(maxLen, i - left + <span class="hljs-number">1</span>); <span class="hljs-comment">// 更新结果</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> maxLen;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3><blockquote><p>用HashMap，Map&lt;水果种类，出现频次&gt;，延伸右边界时，增加频次。缩进左边界时，减少频次。频次为0时，从map删除。<br>getOrDefault(Object key, V defaultValue)，当Map集合中有这个key时，就使用这个key对应的value值，如果没有就使用默认值defaultValue。</p></blockquote><h3 id="3-76-最小覆盖子串"><a href="#3-76-最小覆盖子串" class="headerlink" title="(3)76.最小覆盖子串"></a>(3)<a href="https://leetcode-cn.com/problems/minimum-window-substring/solution/shu-ju-jie-gou-he-suan-fa-hua-dong-chuan-p6ip/">76.最小覆盖子串</a></h3><p><img src="https://img-blog.csdnimg.cn/20210512105421613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">minWindow</span><span class="hljs-params">(String s, String t)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">128</span>];<br>    <span class="hljs-comment">//记录字符串t中每个字符的数量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> ch : t.toCharArray())<br>        map[ch]++;<br>    <span class="hljs-comment">//字符串t的数量</span><br>    <span class="hljs-keyword">int</span> count = t.length();<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<span class="hljs-comment">//窗口的左边界</span><br>    <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<span class="hljs-comment">//窗口的右边界</span><br>    <span class="hljs-comment">//覆盖t的最小长度</span><br>    <span class="hljs-keyword">int</span> windowLength = Integer.MAX_VALUE;<br>    <span class="hljs-comment">//覆盖字符串t开始的位置</span><br>    <span class="hljs-keyword">int</span> strStart = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right &lt; s.length()) &#123;<br>        <span class="hljs-keyword">if</span> (map[s.charAt(right++)]-- &gt; <span class="hljs-number">0</span>)<br>            count--;<br>        <span class="hljs-comment">//如果全部覆盖</span><br>        <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//如果有更小的窗口就记录更小的窗口</span><br>            <span class="hljs-keyword">if</span> (right - left &lt; windowLength) &#123;<br>                windowLength = right - left;<br>                strStart = left;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (map[s.charAt(left++)]++ == <span class="hljs-number">0</span>)<br>                count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//如果找到合适的窗口就截取，否则就返回空</span><br>    <span class="hljs-keyword">if</span> (windowLength != Integer.MAX_VALUE)<br>        <span class="hljs-keyword">return</span> s.substring(strStart, strStart + windowLength);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h3><blockquote><p>这道题目注意，在目标字符串中字母是可以重复的，最后结果是唯一的。</p></blockquote><h1 id="四、模拟行为"><a href="#四、模拟行为" class="headerlink" title="四、模拟行为"></a>四、模拟行为</h1><h2 id="1-相关题目-3"><a href="#1-相关题目-3" class="headerlink" title="1.相关题目"></a>1.相关题目</h2><ul><li>59.螺旋矩阵II</li><li>54.螺旋矩阵</li><li>剑指Offer 29.顺时针打印矩阵</li></ul><h3 id="1-59-螺旋矩阵II"><a href="#1-59-螺旋矩阵II" class="headerlink" title="(1)59.螺旋矩阵II"></a>(1)59.螺旋矩阵II</h3><p><img src="https://img-blog.csdnimg.cn/20210512092024549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] generateMatrix(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-keyword">int</span>[][] nums=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>        <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=n-<span class="hljs-number">1</span>,top=<span class="hljs-number">0</span>,down=n-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> begin=<span class="hljs-number">1</span>,end=n*n;<br>        <span class="hljs-keyword">while</span>(begin&lt;=end)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=left;i&lt;=right;i++)&#123;<br>                nums[top][i]=begin++;<br>            &#125;<br>            top++;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=top;i&lt;=down;i++)&#123;<br>                nums[i][right]=begin++;<br>            &#125;<br>            right--;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=right;i&gt;=left;i--)&#123;<br>                nums[down][i]=begin++;<br>            &#125;<br>            down--;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=down;i&gt;=top;i--)&#123;<br>                nums[i][left]=begin++;<br>            &#125;<br>            left++;<br>        &#125;     <br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h3><blockquote><p><img src="https://img-blog.csdnimg.cn/20210512092240539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="画图理解"></p></blockquote><h3 id="2-54-螺旋矩阵"><a href="#2-54-螺旋矩阵" class="headerlink" title="(2)54.螺旋矩阵"></a>(2)54.螺旋矩阵</h3><p><img src="https://img-blog.csdnimg.cn/20210512090602578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-keyword">null</span> || matrix.length == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> list;<br>        <span class="hljs-keyword">int</span> m = matrix.length;<span class="hljs-comment">//行数</span><br>        <span class="hljs-keyword">int</span> n = matrix[<span class="hljs-number">0</span>].length;<span class="hljs-comment">//列数</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; <br><br>        <span class="hljs-comment">//统计矩阵从外向内的层数，如果矩阵非空，那么它的层数至少为1层</span><br>        <span class="hljs-keyword">int</span> count = (Math.min(m, n)+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//从外部向内部遍历，逐层打印数据</span><br>        <span class="hljs-keyword">while</span>(i &lt; count) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n-i; j++) &#123;<span class="hljs-comment">//从左到右</span><br>list.add(matrix[i][j]);<br>&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; m-i; j++) &#123;<span class="hljs-comment">//从上到下</span><br>list.add(matrix[j][(n-<span class="hljs-number">1</span>)-i]);<br>&#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = (n-<span class="hljs-number">1</span>)-(i+<span class="hljs-number">1</span>); j &gt;= i &amp;&amp; (m-<span class="hljs-number">1</span>-i != i); j--) &#123;<span class="hljs-comment">//从右到左</span><br>list.add(matrix[(m-<span class="hljs-number">1</span>)-i][j]);<br>&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = (m-<span class="hljs-number">1</span>)-(i+<span class="hljs-number">1</span>); j &gt;= i+<span class="hljs-number">1</span> &amp;&amp; (n-<span class="hljs-number">1</span>-i) != i; j--) &#123;<span class="hljs-comment">//从下到上</span><br>list.add(matrix[j][i]);<br>&#125;<br>        i++;<br>        &#125;    <br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h3><blockquote><p>将矩阵从外部向内部逐层遍历打印矩阵，最外面一圈打印完，里面仍然是一个矩阵。<br><code>m - 1 - i</code> 是指随着层数增加时，层数的边界所在行（即最上行和最下行的所处的行数），如果出现最上行和最下行是同一行的情况（比如：3行5列的矩阵中，第二层是1行3列的矩阵），此时按顺序打印完第二层第一行后，第一列为空，不打印，折返后如果没有（<code>m - 1 - i != i</code>）这个限制，会重新打印第二层的第一行，造成结果的值变多。同理可得，<code>n - 1 - i != i</code>。</p></blockquote><h3 id="3-29-顺时针打印矩阵"><a href="#3-29-顺时针打印矩阵" class="headerlink" title="(3)29.顺时针打印矩阵"></a>(3)29.顺时针打印矩阵</h3><p><img src="https://img-blog.csdnimg.cn/20210512090304657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dividend, <span class="hljs-keyword">int</span> divisor)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> x = dividend, y = divisor;<br>        <span class="hljs-keyword">boolean</span> isNeg = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> ((x &gt; <span class="hljs-number">0</span> &amp;&amp; y &lt; <span class="hljs-number">0</span>) || (x &lt; <span class="hljs-number">0</span> &amp;&amp; y &gt; <span class="hljs-number">0</span>)) isNeg = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) x = -x;<br>        <span class="hljs-keyword">if</span> (y &lt; <span class="hljs-number">0</span>) y = -y;<br>        <span class="hljs-keyword">long</span> l = <span class="hljs-number">0</span>, r = x;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-keyword">long</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (mul(mid, y) &lt;= x) &#123;<br>                l = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">long</span> idx = isNeg ? -l : l;<br>        <span class="hljs-keyword">if</span> (idx &gt; Integer.MAX_VALUE || idx &lt; Integer.MIN_VALUE) <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)idx;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">long</span> a, <span class="hljs-keyword">long</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((k &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) ans += a;<br>            k &gt;&gt;= <span class="hljs-number">1</span>;<br>            a += a;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h3><blockquote><p>二分法+快速乘法模板<br><strong>快速乘法</strong>使用二进制将乘法转化为加法，既加快可以加快运算速度，又可以防止直接相乘之后溢出</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode刷题计划一</title>
    <link href="/2021/04/29/Leetcode%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92%E4%B8%80/"/>
    <url>/2021/04/29/Leetcode%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题目标："><a href="#刷题目标：" class="headerlink" title="刷题目标："></a>刷题目标：</h1><font color=#999AAA ><p>刷题计划：</p><ul><li>前TOP100，学习java解题，每天2道题，先刷2遍，和<a href="https://qinhuaian.github.io/">小姐妹</a>互相监督。</li><li>数组-&gt; 链表-&gt; 哈希表-&gt;字符串-&gt;栈与队列-&gt;树-&gt;回溯-&gt;贪心-&gt;动态规划-&gt;图论-&gt;高级数据结构，从简单刷起，再慢慢做中等、困难题目。</li><li>尽量不要用暴力！！！<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"></li></ul><h1 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h1><font color=#999AAA ><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p><img src="https://img-blog.csdnimg.cn/20210429202353761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"><br><img src="https://img-blog.csdnimg.cn/20210429202334801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload alt="示例"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br> <span class="hljs-keyword">if</span> (nums == <span class="hljs-keyword">null</span> || nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// 数据预处理</span><br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123; <span class="hljs-comment">// O(n)</span><br>        map.put(nums[i], i);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123; <span class="hljs-comment">// O(n)</span><br>        <span class="hljs-keyword">int</span> x = nums[i];<br>        <span class="hljs-comment">// 哈希查找 - O(1)</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(target - x)) &#123;<br>            <span class="hljs-keyword">int</span> index = map.get(target - x);<br>            <span class="hljs-comment">// i 和 index 不是同一个元素，同一个元素不能使用两次</span><br>            <span class="hljs-keyword">if</span> (i != index) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i, index&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a>53. 最大子序和</h2><p><img src="https://img-blog.csdnimg.cn/20210429203033436.png#pic_center" srcset="/img/loading.gif" lazyload alt="题目"><br><img src="https://img-blog.csdnimg.cn/20210429203049134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="示例"></p><blockquote><p> <strong>解题思路</strong><br> 对于含有正数的序列而言，最大子序列和肯定是正数，所以头尾肯定都是正数；<br> 我们可以从第一个正数开始算起，每往后加一个数便更新一次和的最大值；<br>当前子序列和为负数时，则表明此前序列无法为后面提供最大子序列和，因此必须重新确定序列首项。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> ans=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(sum&gt;<span class="hljs-number">0</span>)&#123;<br>                sum+=nums[i];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sum=nums[i];<span class="hljs-comment">//记录前一个数</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(ans&lt;=sum)&#123;<br>                ans=sum;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h2><p><img src="https://img-blog.csdnimg.cn/20210429203743568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"><br><img src="https://img-blog.csdnimg.cn/20210429203903359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="示例"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> prices[])</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> minprice = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">int</span> maxprofit = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; prices.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (prices[i] &lt; minprice) &#123;<br>                minprice = prices[i];<span class="hljs-comment">//历史最低点</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (prices[i] - minprice &gt; maxprofit) &#123;<br>                maxprofit = prices[i] - minprice;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxprofit;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a>169. 多数元素</h2><p><img src="https://img-blog.csdnimg.cn/20210429204355786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">return</span> nums[nums.length/<span class="hljs-number">2</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h2><p><img src="https://img-blog.csdnimg.cn/20210429204449642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><blockquote><p>先统计非零元素个数，再将非零的紧凑的重新分配到数组，剩下的直接赋值0。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录非零元素个数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]!=<span class="hljs-number">0</span>) cnt++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]!=<span class="hljs-number">0</span>) &#123;<br>                nums[index]=nums[i];<br>                index++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=index;i&lt;nums.length;i++)&#123;<br>            nums[i]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a>448. 找到所有数组中消失的数字</h2><p><img src="https://img-blog.csdnimg.cn/20210429201958628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FjdGlvbl9ub3dfemo=,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" lazyload alt="题目"></p><blockquote><p>遍历数组，将每个数字交换到它理应出现的位置上，下面情况不用换：<br>当前数字本就出现在理应的位置上，跳过，不用换。<br>当前数字理应出现的位置上，已经存在当前数字，跳过，不用换。<br>再次遍历，如果当前位置没对应正确的数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">findDisappearedNumbers</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-comment">//利用数组与索引建立关系</span><br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">int</span> num;<span class="hljs-comment">//记录索引下的值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; nums.length ; i++)&#123;<br>            num = Math.abs(nums[i])-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[num] &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//索引下的值在理应位置是一个其余大于0的值，变为负数</span><br>                nums[num] *= -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i &lt; nums.length ; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//若最后在理应位置不是负数，说明这个数在其他位置重复，理应的数又没出现</span><br>                res.add(i+<span class="hljs-number">1</span>);<span class="hljs-comment">//不存在的存入</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><font color=#999AAA ><ol><li>复习了java一些语法，忘性太快了。</li><li>在做题时，总是用暴力简单思维，以后多学习题解中动规，dp，容器巧妙解决的思路吧。</li><li>自律不行他律！</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
